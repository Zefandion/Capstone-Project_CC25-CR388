# -*- coding: utf-8 -*-
"""Prediksi Penyakit Diabetes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nc8qP4fXtb3IS_HSo8osuQcbKJefCES

# Import Library
"""

# Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.utils import class_weight

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

"""# Memuat Dataset

Submber: https://www.kaggle.com/datasets/717451f4573e9c3d8963e626808ade67a89fbd2ee660be008c1aba16b2a2345a
"""

# Load dataset
df = pd.read_csv("diabetes_prediction_dataset.csv")

"""# Data Loading"""

# Tampilkan 5 data teratas untuk memastikan
df.head()

# Menampilkan informasi tentang dataset, termasuk jumlah baris, kolom, tipe data, dan jumlah nilai non-null
df.info()

# Statistik deskriptif untuk data numerik
df.describe()

# Ukuran dataset
print("Jumlah baris dan kolom:", df.shape)

# Tipe data setiap kolom
print("\nTipe data per kolom:")
print(df.dtypes)

"""# Cleaning"""

# Cek missing values
print("\nJumlah missing values per kolom:")
print(df.isnull().sum())

# Periksa data duplikat
print("Jumlah data duplikat:", df.duplicated().sum())

"""Atasi data duplicate"""

df.drop_duplicates(inplace = True)

# Periksa kembali data duplikat
print("Jumlah data duplikat:", df.duplicated().sum())

# Ukuran dataset
print("Jumlah baris dan kolom:", df.shape)

print(df['diabetes'].value_counts())

"""# Preprocessing

- Encode gender dan smoking_history (kolom kategorikal)
- Standarisasi kolom numerik (age, bmi, dll)
"""

# Encode kolom kategorikal
df['gender'] = LabelEncoder().fit_transform(df['gender'])
df['smoking_history'] = LabelEncoder().fit_transform(df['smoking_history'])

# Split fitur dan label
X = df.drop('diabetes', axis=1)
y = df['diabetes']

# Standarisasi fitur numerik
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""# Data Splitting"""

# Bagi data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""Dataset dibagi menjadi 80% data latih dan 20% data uji.

# Membangun Model TensorFlow
"""

# Hitung bobot kelas dari data latih
class_weights = class_weight.compute_class_weight(
    'balanced',
    classes=np.unique(y_train),
    y=y_train
)
class_weights_dict = dict(enumerate(class_weights))

print(f"Menggunakan Bobot Kelas: {class_weights_dict}")

# Membangun Model TensorFlow
model = Sequential([
    Dense(32, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(16, activation='relu'),
    Dense(1, activation='sigmoid')  # Output biner
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

# Melatih Model dengan penambahan class_weight
history = model.fit(X_train, y_train,
                    epochs=20,
                    batch_size=32,
                    validation_split=0.2,
                    class_weight=class_weights_dict)

"""# Evaluasi Model"""

loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")

y_pred = (model.predict(X_test) > 0.5).astype("int32")
print(classification_report(y_test, y_pred))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d")
plt.show()

"""# Simpan Model dan Skaler"""

model.save("diabetes_model.keras")
import joblib
joblib.dump(scaler, "scaler.pkl")

# ====================================================================
# Melakukan Prediksi Berdasarkan Input Pengguna
# ====================================================================

# 1. Muat kembali model dan scaler yang sudah disimpan
try:
    loaded_model = tf.keras.models.load_model("diabetes_model.keras")
    loaded_scaler = joblib.load("scaler.pkl")
    print("Model dan Scaler berhasil dimuat!")
except Exception as e:
    print(f"Gagal memuat model atau scaler. Pastikan file 'diabetes_model.keras' dan 'scaler.pkl' ada di direktori yang sama. Error: {e}")

# 2. Buat fungsi untuk melakukan prediksi
def prediksi_diabetes():
    print("\n--- Masukkan Data Pasien untuk Prediksi Diabetes ---")

    # Kumpulkan input dari pengguna
    # Urutan fitur harus sama persis dengan urutan kolom pada saat training
    # ['gender', 'age', 'hypertension', 'heart_disease', 'smoking_history', 'bmi', 'HbA1c_level', 'blood_glucose_level']

    try:
        gender_input = input("Jenis Kelamin (Male/Female/Other): ").strip().capitalize()
        age = float(input("Usia: "))
        hypertension = int(input("Memiliki Hipertensi (1=Ya, 0=Tidak): "))
        heart_disease = int(input("Memiliki Penyakit Jantung (1=Ya, 0=Tidak): "))
        smoking_input = input("Riwayat Merokok (never/No Info/current/former/ever/not current): ").strip()
        bmi = float(input("Indeks Massa Tubuh (BMI): "))
        hba1c_level = float(input("Kadar HbA1c: "))
        blood_glucose_level = int(input("Kadar Gula Darah: "))

        # 3. Ubah input kategorikal menjadi numerik (sesuai LabelEncoder)
        # Urutan ini didasarkan pada .fit_transform() default (urutan alfabetis)
        gender_map = {'Female': 0, 'Male': 1, 'Other': 2}
        smoking_map = {'No Info': 0, 'current': 1, 'ever': 2, 'former': 3, 'never': 4, 'not current': 5}

        gender = gender_map.get(gender_input, -1)
        smoking_history = smoking_map.get(smoking_input, -1)

        if gender == -1 or smoking_history == -1:
            print("\nError: Input untuk 'Jenis Kelamin' atau 'Riwayat Merokok' tidak valid.")
            return

        # Buat array numpy dari input
        input_data = np.array([[
            gender, age, hypertension, heart_disease,
            smoking_history, bmi, hba1c_level, blood_glucose_level
        ]])

        # 4. Gunakan scaler yang sudah dimuat untuk mengubah skala input
        input_data_scaled = loaded_scaler.transform(input_data)

        # 5. Lakukan prediksi
        prediksi = loaded_model.predict(input_data_scaled)
        probabilitas = prediksi[0][0] # Ambil nilai probabilitas dari output model

        # 6. Tampilkan hasil
        print("\n--- Hasil Prediksi ---")
        print(f"Probabilitas mengidap diabetes: {probabilitas * 100:.2f}%")

        if probabilitas > 0.5:
            print("Kesimpulan: Berdasarkan data yang dimasukkan, pengguna ini **BERISIKO TINGGI** mengidap diabetes.")
        else:
            print("Kesimpulan: Berdasarkan data yang dimasukkan, pengguna ini **BERISIKO RENDAH** mengidap diabetes.")

    except ValueError:
        print("\nError: Pastikan Anda memasukkan angka yang valid untuk data numerik.")
    except Exception as e:
        print(f"\nTerjadi kesalahan: {e}")

# Panggil fungsi untuk memulai prediksi
prediksi_diabetes()